package sk.upjs.ics.refwallet;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.util.Log;

import java.util.Calendar;

import sk.upjs.ics.refwallet.Defaults;
import sk.upjs.ics.refwallet.Provider;

import static android.content.ContentResolver.SCHEME_CONTENT;
import static sk.upjs.ics.refwallet.Defaults.ALL_COLUMNS;
import static sk.upjs.ics.refwallet.Defaults.AUTOGENERATED_ID;
import static sk.upjs.ics.refwallet.Defaults.NO_CONTENT_OBSERVER;
import static sk.upjs.ics.refwallet.Defaults.NO_GROUP_BY;
import static sk.upjs.ics.refwallet.Defaults.NO_HAVING;
import static sk.upjs.ics.refwallet.Defaults.NO_NULL_COLUMN_HACK;
import static sk.upjs.ics.refwallet.Defaults.NO_SELECTION;
import static sk.upjs.ics.refwallet.Defaults.NO_SELECTION_ARGS;
import static sk.upjs.ics.refwallet.Defaults.NO_SORT_ORDER;
import static sk.upjs.ics.refwallet.Defaults.NO_TYPE;


public class ZapasContentProvider extends ContentProvider {
    public static final String AUTHORITY = "sk.upjs.ics.refwallet.ZapasContentProvider";
    public static final String ALL_ROWS = null;
    public static final Uri CONTENT_URI = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(Provider.Zapas.TABLE_NAME)
            .build();


    public static final Uri PHOTO_URI_CONTENT_URI = new Uri.Builder()
            .scheme(ContentResolver.SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath(ProviderFoto.PhotoUri.TABLE_NAME)
            .build();

    private static final int URI_MATCH_NOTES = 0;
    private static final int URI_MATCH_NOTE_BY_ID = 1;
    private static final int URI_MATCH_NOTE_BY_STATS = 2;
    public static final int URI_MATCH_PHOTO = 3;
    public static final int URI_MATCH_PHOTO_BY_ID = 4;
    public static final int URI_MATCH_NOTE_BY_GRAF = 5;

    private static final String MIME_TYPE_ZAPASY = ContentResolver.CURSOR_DIR_BASE_TYPE + "/vnd." + AUTHORITY + "." ;
    private static final String MIME_TYPE_SINGLE_ZAPAS = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." ;

    private static final String MIME_TYPE_PHOTO_URI = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." + ProviderFoto.PhotoUri.TABLE_NAME;


    public ZapasContentProvider() {
    }

    private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);

    private DatabaseOpenHelper databaseHelper;

    @Override
    public boolean onCreate() {
        uriMatcher.addURI(AUTHORITY,Provider.Zapas.TABLE_NAME, URI_MATCH_NOTES);
        uriMatcher.addURI(AUTHORITY, Provider.Zapas.TABLE_NAME + "/#", URI_MATCH_NOTE_BY_ID);
        uriMatcher.addURI(AUTHORITY, Provider.Zapas.TABLE_NAME +"/stats", URI_MATCH_NOTE_BY_STATS);
        uriMatcher.addURI(AUTHORITY, Provider.Zapas.TABLE_NAME +"/graf", URI_MATCH_NOTE_BY_GRAF);
        uriMatcher.addURI(AUTHORITY, ProviderFoto.PhotoUri.TABLE_NAME, URI_MATCH_PHOTO);
        uriMatcher.addURI(AUTHORITY, ProviderFoto.PhotoUri.TABLE_NAME + "/#", URI_MATCH_PHOTO_BY_ID);

        this.databaseHelper = new DatabaseOpenHelper(getContext());
        return true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        Cursor cursor = null;
        Log.w("Uri2",uri.toString());
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTES:
                cursor = listNotes();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_NOTE_BY_ID:
                long id = ContentUris.parseId(uri);
                cursor = findById(id);
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_NOTE_BY_STATS:
                Log.w("Uri2",uri.toString());
                cursor = statistic();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_NOTE_BY_GRAF:
                Log.w("Uri2",uri.toString());
                cursor = graf();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_MATCH_PHOTO:
                cursor = getPhotoCursor();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            default:
                return Defaults.NO_CURSOR;
        }
    }
    /*SELECT strftime('%m', trxDateTime) as valMonth,
    SUM(trxAmount) as valTotalMonth
    FROM trx_log  GROUP BY valMonth*/
    private Cursor graf() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Zapas.TABLE_NAME,
                new String[]{"strftime('%m',timestamp) as valMonth","SUM(spolu) as valTotalMonth"},
                NO_SELECTION, NO_SELECTION_ARGS, "valMonth", NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor findById(long id) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        String selection = Provider.Zapas._ID + "=" + id;
        return db.query(Provider.Zapas.TABLE_NAME, ALL_COLUMNS, selection, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor listNotes() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Zapas.TABLE_NAME, ALL_COLUMNS, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor statistic() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(Provider.Zapas.TABLE_NAME,
                new String[]{"SUM(pausal)","SUM(stravne)","SUM(cestovne)","SUM(spolu)","COUNT(cislozap)"},
                NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }

    private Cursor getPhotoCursor() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query(ProviderFoto.PhotoUri.TABLE_NAME,
                ALL_COLUMNS, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }
    // AS stravne","SUM(cestovne) AS cestovne","SUM(pausal) AS Pausal","SUM(spolu) AS spolu"
    @Override
    public Uri insert(Uri uri, ContentValues values) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTES:
                Uri newItemUri = saveZapas(values);
                getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
                return newItemUri;
            case URI_MATCH_PHOTO:
                Uri newItemUri2 = saveFoto(values);
                getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
                return newItemUri2;
            default:
                return Defaults.NO_URI;
        }
    }

    private Uri saveFoto(ContentValues values){
        Calendar calendar = Calendar.getInstance();
        ContentValues contentValues1 = new ContentValues();
        contentValues1.put(ProviderFoto.PhotoUri._ID, Defaults.AUTOGENERATED_ID);
        contentValues1.put(ProviderFoto.PhotoUri.URI, values.getAsString(ProviderFoto.PhotoUri.URI));
        contentValues1.put(ProviderFoto.PhotoUri.YEAR, calendar.get(Calendar.YEAR));
        contentValues1.put(ProviderFoto.PhotoUri.MONTH, calendar.get(Calendar.MONTH)+1);
        contentValues1.put(ProviderFoto.PhotoUri.DAY, calendar.get(Calendar.DAY_OF_MONTH));
        contentValues1.put(ProviderFoto.PhotoUri.DESCRIPTION, values.getAsString(ProviderFoto.PhotoUri.DESCRIPTION));

        SQLiteDatabase db1 = databaseHelper.getWritableDatabase();
        long newId1 = db1.insert(ProviderFoto.PhotoUri.TABLE_NAME, NO_NULL_COLUMN_HACK, contentValues1);
        getContext().getContentResolver().notifyChange(PHOTO_URI_CONTENT_URI, NO_CONTENT_OBSERVER);
        return ContentUris.withAppendedId(PHOTO_URI_CONTENT_URI, newId1);
    }
    private Uri saveZapas(ContentValues values) {
        ContentValues zapas = new ContentValues();
        zapas.put(Provider.Zapas._ID, AUTOGENERATED_ID);
        zapas.put(Provider.Zapas.CISLO_ZAP, values.getAsString(Provider.Zapas.CISLO_ZAP));
        zapas.put(Provider.Zapas.TIMESTAMP, values.getAsString(Provider.Zapas.TIMESTAMP));
        zapas.put(Provider.Zapas.LIGA, values.getAsString(Provider.Zapas.LIGA));
        zapas.put(Provider.Zapas.STADION, values.getAsString(Provider.Zapas.STADION));
        zapas.put(Provider.Zapas.DOMACI, values.getAsString(Provider.Zapas.DOMACI));
        zapas.put(Provider.Zapas.HOSTIA, values.getAsString(Provider.Zapas.HOSTIA));
        zapas.put(Provider.Zapas.HR1, values.getAsString(Provider.Zapas.HR1));
        zapas.put(Provider.Zapas.HR2, values.getAsString(Provider.Zapas.HR2));
        zapas.put(Provider.Zapas.CR1, values.getAsString(Provider.Zapas.CR1));
        zapas.put(Provider.Zapas.CR2, values.getAsString(Provider.Zapas.CR2));
        zapas.put(Provider.Zapas.INSTRUKTOR, values.getAsString(Provider.Zapas.INSTRUKTOR));
        zapas.put(Provider.Zapas.VIDEO, values.getAsString(Provider.Zapas.VIDEO));
        zapas.put(Provider.Zapas.ODCHOD, values.getAsString(Provider.Zapas.ODCHOD));
        zapas.put(Provider.Zapas.PRICHOD, values.getAsString(Provider.Zapas.PRICHOD));
        zapas.put(Provider.Zapas.Z_MESTA, values.getAsString(Provider.Zapas.Z_MESTA));
        zapas.put(Provider.Zapas.DO_MESTA, values.getAsString(Provider.Zapas.DO_MESTA));
        zapas.put(Provider.Zapas.PAUSAL, values.getAsString(Provider.Zapas.PAUSAL));
        zapas.put(Provider.Zapas.STRAVNE, values.getAsString(Provider.Zapas.STRAVNE));
        zapas.put(Provider.Zapas.CESTOVNE, values.getAsString(Provider.Zapas.CESTOVNE));
        zapas.put(Provider.Zapas.SPOLU, values.getAsString(Provider.Zapas.SPOLU));

        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        long newId = db.insert(Provider.Zapas.TABLE_NAME, NO_NULL_COLUMN_HACK, zapas);
        return ContentUris.withAppendedId(CONTENT_URI, newId);
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTE_BY_ID:
                long id = ContentUris.parseId(uri);
                int affectedRows = databaseHelper.getWritableDatabase()
                        .delete(Provider.Zapas.TABLE_NAME, Provider.Zapas._ID + " = " + id, Defaults.NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
                return affectedRows;
            case URI_MATCH_PHOTO_BY_ID:
                long id1 = ContentUris.parseId(uri);
                int affectedRows3 = databaseHelper.getWritableDatabase()
                        .delete(ProviderFoto.PhotoUri.TABLE_NAME, ProviderFoto.PhotoUri._ID + " = " + id1, Defaults.NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(PHOTO_URI_CONTENT_URI, NO_CONTENT_OBSERVER);
                return affectedRows3;

            case URI_MATCH_PHOTO:
                int affectedRows4 = databaseHelper.getWritableDatabase()
                        .delete(ProviderFoto.PhotoUri.TABLE_NAME, ALL_ROWS, Defaults.NO_SELECTION_ARGS);
                getContext().getContentResolver().notifyChange(PHOTO_URI_CONTENT_URI, NO_CONTENT_OBSERVER);
                return affectedRows4;
            default:
                return 0;
        }
    }

    @Override
    public String getType(Uri uri) {
        switch(uriMatcher.match(uri)) {
            case URI_MATCH_NOTE_BY_ID:
                return MIME_TYPE_SINGLE_ZAPAS;
            case URI_MATCH_NOTES:
                return MIME_TYPE_ZAPASY;
            case URI_MATCH_NOTE_BY_STATS:
                return MIME_TYPE_ZAPASY;
            case URI_MATCH_PHOTO:
                return MIME_TYPE_PHOTO_URI;
            case URI_MATCH_NOTE_BY_GRAF:
                return MIME_TYPE_ZAPASY;
        }
        return NO_TYPE;
    }


    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        throw new UnsupportedOperationException("Not yet implemented");
    }
}

